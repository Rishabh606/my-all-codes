import java.math.BigInteger;
import java.util.Arrays;
import java.util.Scanner;

public class contest3 {
	public static Scanner scn = new Scanner(System.in);

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// aggresive_cows();
		//modularExp();
	//	murthalParatha();
		painter();
	}

	public static int[] takeinput(int n) {
		int[] rv = null;
		// long n = scn.nextInt();
		rv = new int[n];
		for (int i = 0; i < n; i++) {
			rv[i] = scn.nextInt();
		}
		return rv;
	}

	public static void aggresive_cows() {
		int n = scn.nextInt();
		int c = scn.nextInt();
		int[] arr = takeinput(n);
		Arrays.sort(arr);
		int si = arr[0];
		int ei = arr[arr.length - 1];
		int li = arr[0];
		int hi = arr[arr.length - 1];
		while (si <= ei && (li < hi)) {
			int cows = c - 1;
			int mid = (si + ei) / 2;
			int temp = arr[0];
			int flag = 1; // neutral_key
			for (int i = 1; i < n; i++) {
				if (cows <= 0) {
					flag = 2; // move right
					li = mid;
					break;
				}
				if ((arr[i] - mid >= temp)) {
					temp = arr[i];
					cows--;
				}
				if (i == n - 1 && cows != 0) {
					flag = 0; // move left
					hi = mid;
				}
			}
			if (flag == 0) {
				if (ei == mid) {
					break;
				}
				ei = mid;
			} else if (flag == 2) {

				si = mid + 1;
			}
		}
		System.out.println(li);
	}

	public static void modularExp() {
		BigInteger a = scn.nextBigInteger();
		int b = scn.nextInt();
		BigInteger c = scn.nextBigInteger();
		BigInteger d = (a.pow(b)).mod(c);
		System.out.println(d);
	}

	public static void murthalParatha() {
		int p0 = scn.nextInt();
		int n = scn.nextInt();
		int[] arr = takeinput(n);
		Arrays.sort(arr);
	//	int hi = (arr[0] * (p0) * (p0 + 1)) / 2;
		int li = arr[0];
		int si = arr[0];
		int ei = (arr[0] * (p0) * (p0 + 1)) / 2;
		while (si < ei) {
			int mid = (si + ei) / 2;
			int sum = 0;
			for (int i = 0; i < arr.length; i++) {
				int x = (int) Math.floor((-1 + Math.sqrt(1 + (double) (8 * mid )/ (double) arr[i])) / 2.0);
				sum += x;
			}/*
			if (sum == p0) {
				System.out.println(mid);
				return;
			} else*/ if (sum < p0) {
				//li = si;
			//	hi = ei;
				si = mid + 1;
			} else {
			//	hi = ei;
				li= mid;
				ei = mid;
			}
		}
//		System.out.println((li+hi)/2);
//		System.out.println((si+ei)/2);
		System.out.println(li);
		}
	
	public static void painter(){
		int K = scn.nextInt();
        int N = scn.nextInt();
        int [] arr = new int[N];
        int ei = 0;
        for(int i = 0; i<arr.length;i++){
             arr[i] = scn.nextInt();
             ei+=arr[i];
        }
        if(K>=N){
            System.out.println(arr[N-1]);
            return;
        }
        int ans = arr[arr.length-1];
        int si = arr[arr.length-1];
        if(K==1){
            System.out.println(ei);
            return;
        }
        while(si<ei){
            int flag = 0;
            int mid = (si+ei)/2;
            int count = 0;
            for(int i = 0; i<K;i++){
                int sum = 0;
                 if(count>arr.length-1){
                        flag = 1;
                        break;
                    }
                 int m = 0;
                while(sum<=mid){
                	/*if(m==0 && i==0){
                		sum+=arr[count];
                	}else if(m!=0 && i!=0){
                		sum+=arr[count];
                	}else if(m!=0 && i==0){
                		sum+=arr[count];
                	}else*/
                	if(m==0 && i!=0){
                			
                	}else{
                		sum+=arr[count];
                	}
                    if(sum<=mid){
                      count++;
                    }else{
                    	count--;
                    //	break;
                    }
                    m++;
                    if(count>arr.length-1){
                        flag = 1;
                        break;
                    }
                }
                
            }
            if(flag==1){
                //decrease time
                ans = mid;
                ei = mid;
            }else if(flag==0){
                //increase time
                si = mid +1;
            }
            
        }
        System.out.println(ans);
    }
}
