package contest;

import java.util.Scanner;

public class googlejam2017 {
	public static Scanner scn = new Scanner(System.in);

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int t = scn.nextInt();

		/*for (int i = 1; i <= t; i++) {
			int val = pancakes();
			if (val == -1) {
				System.out.println("Case #" + i + ": IMPOSSIBLE");
			} else {
				System.out.println("Case #" + i + ": " + val);
			}
		}*/

		/*for (int i = 1; i <= t; i++) {
			System.out.println("Case #" + i + ": " + tidynumbers());
		}
		*/
		/*for (int i = 1; i <= t; i++) {
			Bathroomstalls(i);
		}*/
		for (int i = 1; i <= t; i++) {
			fashion_show(i);
		}
	}

	public static int pancakes() {
		int count = 0;
		String s = scn.next();
		StringBuilder str = new StringBuilder(s);
		int k = scn.nextInt();
		for (int i = 0; i + k <= s.length(); i++) {
			if (str.charAt(i) == '-') {
				for (int j = i; j < i + k; j++) {
					if (str.charAt(j) == '-') {
						str.setCharAt(j, '+');
					} else {
						str.setCharAt(j, '-');
					}
				}
				count++;
			}
		}
		for (int i = s.length() - k + 1; i < s.length(); i++) {
			if (str.charAt(i) == '-') {
				return -1;
			}
		}
		return count;
	}

	public static String tidynumbers() {
		String s = scn.next();
		StringBuilder str = new StringBuilder(s);
		int i = 0;
		char var = 0;
		int pos = -1;
		for (i = 0; i < s.length() - 1; i++) {
			if (str.charAt(i) > str.charAt(i + 1)) {
				if (i != 0) {
					if (str.charAt(i - 1) == str.charAt(i)) {
						str.setCharAt(pos, (char) ((int) str.charAt(pos) - 1));
						i = pos;
						break;
					}
				}
				str.setCharAt(i, (char) ((int) str.charAt(i) - 1));
				break;
			}
			if (str.charAt(i) == str.charAt(i + 1) && var != str.charAt(i)) {
				var = str.charAt(i);
				pos = i;
			}
		}
		for (int j = i + 1; j < s.length(); j++) {
			str.setCharAt(j, '9');
		}
		if (str.charAt(0) == '0') {
			str.deleteCharAt(0);
		}
		return str.toString();
	}

	public static void Bathroomstalls(int u) {
		int n = scn.nextInt();
		int k = scn.nextInt();
		int ulti_ls = -1;
		int ulti_rs = -1;
		int[] stalls = new int[n + 2];
		stalls[0] = 1;
		stalls[n + 1] = 1;
		for (int m = 0; m < k; m++) {
			// no of people. consider each of them
			int[][] strg = new int[n + 2][4];
			strg[0][0] = 0;
			strg[0][1] = n + 1;
			strg[0][2] = Math.min(0, n + 1);
			strg[0][3] = Math.max(0, n + 1);
			strg[n + 1][0] = n + 1;
			strg[n + 1][1] = 0;
			strg[0][2] = Math.min(0, n + 1);
			strg[0][3] = Math.max(0, n + 1);
			for (int i = 1; i < n + 1; i++) {
				// for one person consider all places
				if (stalls[i] != 1) {
					int left = i - 1;
					int right = i + 1;
					int Ls = 0;
					int Rs = 0;
					while (true) {
						// every place will have Ls and Rs. calculate them and
						// store them by checks stalls
						if (stalls[left] == 0) {
							Ls++;
							left--;
						} else {
							break;
						}
					}
					while (true) {
						// every place will have Ls and Rs. calculate them and
						// store them by checks stalls
						if (stalls[right] == 0) {
							Rs++;
							right++;
						} else {
							break;
						}
					}
					strg[i][0] = Ls;
					strg[i][1] = Rs;
					strg[i][2] = Math.min(Ls, Rs);
					strg[i][3] = Math.max(Ls, Rs);

				}
				// find max and min Ls and Rs

				// sort them according min of Ls and Rs and the equal have to be
				// checked using max of Ls and Rs. both satisfied will have left
				// one
				// taken. fill stalls and strg gets renewed
			}
			int max = Integer.MIN_VALUE;
			int pos = -1;
			// int max = Integer.MIN_VALUE;
			for (int l = 1; l < n + 1; l++) {
				if (max <= strg[l][2]) {
					if (max == strg[l][2]) {
						if (strg[l][3] > strg[pos][3]) {
							pos = l;
						} else if (strg[l][3] < strg[pos][3]) {
							pos = pos;
						} else {
							if (pos < l) {
								max = strg[pos][2];
							} else {
								// min = strg[l][2];
								pos = l;
							}
						}
					} else {
						max = strg[l][2];
						pos = l;
					}
				}
			}
			ulti_ls = strg[pos][2];
			ulti_rs = strg[pos][3];
			stalls[pos] = 1;
		}
		System.out.println("Case #" + u + ": " + ulti_rs + " " + ulti_ls);
	}
	public static void fashion_show(int u){
		int n = scn.nextInt();
		int m = scn.nextInt();
		int[][] stage = new int[n][n];
		int[][] duplicate = new int[n][n];
		for(int p = 0; p<m;p++){
			char c = scn.next().charAt(0);
			int l = 0;
			if(c == '+'){
				l=1;
			}
			else if(c == 'x'){
				l = 2;
			}
			else{
				l = 3;
			}
			int i = scn.nextInt();
			int j = scn.nextInt();
			stage[i-1][j-1] = l;
			duplicate[i-1][j-1] = l;
		}
		for(int i = 0;i<n;i++){
			for(int j = 0;j<n;j++){
				if(stage[i][j]==0){
					stage[i][j] =1;
					if(checker(stage,i,j)){
						continue;
					}
					else {
						stage[i][j] = 2;
						if(checker(stage,i,j)){
							continue;
						}
						else{
							stage[i][j] = 0;
						}
					}
				}
			}
		}
		place_o(stage);
		int counter = 0;
		int sum = 0;
		int[][] strg = new int[n][3];
		for(int i = 0; i<stage.length;i++){
			for(int j = 0; j<stage.length;j++){
				sum = sum + stage[i][j];
				if(stage[i][j]!=duplicate[i][j]){
					strg[counter][0] = stage[i][j];
					strg[counter][1] = i;
					strg[counter][2] = j;
					counter++;
				}
			}
		}
		System.out.println("Case #" + u + ": " + sum + " " + counter);
		for(int i = 0; i<counter;i++){
			for(int j = 0; j<3;j++){
				if(j==0){
					char l = '.';
					if(strg[i][j] == 1){
						l='+';
					}
					else if(strg[i][j] == 2){
						l = 'x';
					}
					else if(strg[i][j] ==3){
						l = '0';
					}
					else{
						l = '.';
					}
					System.out.print(l+" ");
				}else{
					System.out.print(strg[i][j]+" ");
				}
			}
			System.out.println();
			}
	}
	public static void place_o(int[][] arr){
		for(int i = 0; i<arr.length;i++){
			for(int j = 0; j<arr.length;j++){
				int k = arr[i][j];
				arr[i][j] = 3;
				if(checker(arr, i, j)){
					continue;
				}
				else{
					arr[i][j] = k;
				}
			}
		}
	}
	public static boolean checker(int[][] arr, int i , int j){
		int count=0;
		for(int l = 0; l<arr.length;l++){
			if(arr[i][l]==2||arr[i][l]==3){
				count++;
			}
			if(count>1){
				return false;
			}
		}
		count=0;
		for(int l = 0; l<arr.length;l++){
			if(arr[l][j]==2||arr[l][j]==3){
				count++;
			}
			if(count>1){
				return false;
			}
		}
		count=0;
		for(int l = 0; l<arr.length;l++){
			int p = i-j +l;
			if(p>=0 && p<arr.length){
				if(arr[p][l]==1||arr[p][l]==3){
					count++;
				}
				if(count>1){
					return false;
				}
			}
			count = 0;
			p =i +j -l;
			if(p>=0 && p<arr.length){
				if(arr[p][l]==1||arr[p][l]==3){
					count++;
				}
				if(count>1){
					return false;
				}
			}
		}
		return true;
	}
}
